@using Game.Bots
@using Game.Logic
@using Microsoft.AspNetCore.SignalR.Client
@using Shared.Model

@code
{
    [Parameter] public Game Game { get; set; } = null!;
    [Parameter] public HubConnection HubConnection { get; set; } = null!;
}

<div class="mx-auto flex flex-col items-center">

    <div class="mt-10 p-4 bg-white flex flex-col items-center rounded-xl shadow-lg">
        <h2 class="border-neutral-300 px-4 pb-1 border-b">
            Round @Game.Rounds
            @if (Game.State is GameState.Ended)
            {
                <span> &ndash; Game over</span>
            }
        </h2>
        <h2>
            @Game.Rules.CoinsToWin @(Game.Rules.CoinsToWin == 1 ? "coin" : "coins") to win,
            max @Game.Rules.ChestsPerPlayerCount[Game.Players.Count] on chest
        </h2>
    </div>

    @if (_revealingRoundResultIndex is not null && _revealingRoundResultIndex < _aggregatedRoundResult.Count)
    {
        var result = _aggregatedRoundResult[_revealingRoundResultIndex.Value];
        <div class="my-10 gap-5 p-10 bg-white flex items-center rounded-xl @_appearClassName">

            @if (result.Attackers != null)
            {
                <div class="gap-2 flex flex-col">
                    @foreach (var attacker in result.Attackers)
                    {
                        <div class="gap-2 flex items-center">
                            <GameCharacter Player="@attacker" />
                            <span class="uppercase">@attacker.Name</span>
                        </div>
                    }
                </div>
                <div>
                    @(result.Attackers.Count > 1 ? "all attack" : "attacks")
                </div>
            }

            <div class="gap-2 flex flex-col">
                @foreach (var player in result.TargetPlayers)
                {
                    <div class="gap-2 flex items-center">
                        <GameCharacter Player="@player" />
                        <span class="uppercase">@player.Name</span>
                    </div>
                }
            </div>

            @switch (result.Type)
            {
                case RoundActionType.Dodge:
                    <text>@(result.TargetPlayers.Count == 1 ? "dodges" : "dodge")</text>
                    <i class="dodge card-size"></i>
                    break;
                case RoundActionType.Chest:
                    <text>@(result.Successful ? $"{(result.TargetPlayers.Count == 1 ? "goes" : "go")} to chest" : "missed the chest")</text>
                    <i class="chest card-size"></i>
                    break;
                case RoundActionType.Load:
                    <text>@(result.TargetPlayers.Count == 1 ? "loads" : "load") the gun</text>
                    <i class="bullet card-size"></i>
                    break;
            }
        </div>

        <button class="button" @onclick="RevealNextAsync">@RevealNextText()</button>
    }
    else
    {
        <div class="mt-10 p-4 bg-white flex flex-col items-center rounded-xl text-sm shadow-lg md:text-lg lg:text-xl">
            <table id="game-monitor-game-state">
                <thead>
                    <tr>
                        <th class="text-left">Player</th>
                        <th>Life</th>
                        <th>Gold</th>
                        <th>Bullets</th>
                        @if (Game.State == GameState.Playing)
                        {
                            <th>Trend</th>
                            <th>Ready?</th>
                        }
                        @if (Game.State == GameState.Ended)
                        {
                            <th>Result</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var player in Game.Players)
                    {
                        <tr class="@(player.Winner ? "winner" : "")">
                            <td class="gap-3 flex items-center justify-start @(player.Alive ? "" : "line-through")" @ondblclick="async () => await RemovePlayerAsync(player)">

                                <GameCharacter Player="@player" />

                                <span class="uppercase">
                                    @player.Name
                                    @if (player is BotPlayer)
                                    {
                                        <br />
                                        <span>(bot)</span>
                                    }
                                </span>
                            </td>

                            <td><PlayerHealth Player="player" Rules="Game.Rules" /></td>
                            <td><PlayerCoins Player="player" /></td>
                            <td><PlayerBullets Player="player" /></td>

                            @if (Game.State == GameState.Playing)
                            {
                                <td><PlayerTrend Player="@player" /></td>
                                <td>
                                    @if (player.Alive)
                                    {
                                        @if (player.SelectedCard == null)
                                        {
                                            <WaitingAnimation />
                                        }
                                        else
                                        {
                                            <span>✔️</span>
                                        }
                                    }
                                </td>
                            }
                            else if (Game.State == GameState.Ended)
                            {
                                <td>
                                    @if (player.Winner)
                                    {
                                        <span class="text-3xl">🏆</span>
                                    }
                                    else if (Game.Winners.Count == 0)
                                    {
                                        <i class="text-sm">No winner&hellip;</i>
                                    }
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <ConfirmDialog @ref="_confirmDialog" />
    }

    <div class="hidden">
        <audio id="sound-coin" src="/sound/coin.mp3" preload="auto"></audio>
        <audio id="sound-dodge" src="/sound/dodge.mp3" preload="auto"></audio>
        <audio id="sound-grunt" src="/sound/grunt.mp3" preload="auto"></audio>
        <audio id="sound-load" src="/sound/load.mp3" preload="auto"></audio>
        <audio id="sound-missed-chest" src="/sound/missed-chest.mp3" preload="auto"></audio>
        <audio id="sound-shot" src="/sound/shot.mp3" preload="auto"></audio>
    </div>
</div>