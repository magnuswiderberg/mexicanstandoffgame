@if (_question != null)
{
    <div class="absolute bottom-0 left-0 right-0 top-0 z-30 bg-black/70" tabindex="0" @onkeydown="OnKeyDown" @ref="_bgElement">
        <div class="z-31 relative top-40 mx-10 flex flex-col gap-10 rounded-lg bg-white p-6 sm:mx-auto sm:max-w-[50%] @_question.ClassName">
            @_question.Message
            <div class="flex justify-between gap-5">
                <button tabindex="1" class="button in-menu" @onclick="() => OnOptionSelected(true)">@_question.AgreeOption</button>
                <button tabindex="2" class="button in-menu neutral" @onclick="() => OnOptionSelected(false)">@_question.DeclineOption</button>
            </div>
        </div>
    </div>
}
@code {

    public record Question(string Message, string AgreeOption, string DeclineOption, string? ClassName = null);

    private Question? _question;
    private Func<bool?, Task>? _callback;
    private ElementReference _bgElement;

    public async Task ShowAsync(Question question, Func<bool?, Task> callback)
    {
        _question = question;
        _callback = callback;
        StateHasChanged();
        await Task.Delay(200);
        await _bgElement.FocusAsync();
    }

    public void Hide()
    {
        _question = null;
        _callback = null;
        StateHasChanged();
    }

    private async Task OnOptionSelected(bool? option)
    {
        if (_callback != null) await _callback(option);
        Hide();
    }

    private async Task OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Code == "Escape")
        {
            if (_callback != null) await _callback(null);
            Hide();
        }
    }
}